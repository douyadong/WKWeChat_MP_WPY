<!--
    @页面名称：整个小程序首页
    @作者：赵华刚 (tangxuyang@lifang.com)
    @业务逻辑说明：
        1.
        2.        
-->
<template lang="wxml">    
    <view @tap="clickCover" class="cover {{filter.selectedFilterSection!=''?'':'invisible'}}">
    </view> 
    <block wx:if="{{isOpenCity}}"><view class="header {{fixed?'fixed':''}}">
    <view class="city-search" >
        <view class="city" @tap="switchCity">{{city.cityName}}</view>
        <view class="search-box">
            <text class="iconfont icon-search"></text><view class="estate-address" @tap="searchEstate">{{estate && estate.displayStr || '搜索小区或地址'}}</view><text class="iconfont icon-close {{estate && estate.displayStr ? '':'invisible'}}" @tap="clearEstate"></text>
        </view>
    </view>
    <view class="current-price">
        <view class="title">今日{{city && city.cityName}}房价</view>
        <view class="price">{{unitPrice}}</view>
        <view class="detail" @tap="gotoPriceList">查看 <text class="iconfont icon-next"></text></view>
    </view>
    <view class="filter">
        <view class="district-total-type-sort">
            <view class="district-section">
                <view class="{{filter.selectedFilterSection == 'district'? 'open' : 'closed'}} {{filter.districtSection.selectedDistrictId != '' && filter.districtSection.selectedDistrictId != '-1' && filter.districtSection.selectedMetroId != '-1' && filter.districtSection.selectedMetroId != '' ? 'active' : ''}}" @tap="switchFilter" data-name="district">区域</view>                
            </view>            
            <view class="total-section">
                <view class="{{filter.selectedFilterSection == 'total'? 'open' : 'closed'}}  {{filter.totalSection.selectedId!=''?'active':''}}" @tap="switchFilter" data-name="total">总价</view>                
            </view>
            <view class="type-section">
                <view class="{{filter.selectedFilterSection == 'type'? 'open' : 'closed'}} {{filter.typeSection.selectedIds.length>0?'active':''}}" @tap="switchFilter" data-name="type">户型</view>                
            </view>
            <view class="sort-section">
                <view class="{{filter.selectedFilterSection == 'sort'? 'open' : 'closed'}} {{filter.sortSection.selectedId !== '' ? 'active': ''}}" @tap="switchFilter" data-name="sort">排序</view>
                
            </view>            
        </view>    
        <view class="content {{filter.selectedFilterSection == '' ? 'invisible': ''}}">
                <view class="items {{filter.selectedFilterSection == 'district'? '' : 'invisible'}}">
                    <view class="wk-tabs">
                        <view class="tabs-handle">
                            <view class="{{filter.districtSection.selectedSection == 'district' ? 'on':''}}" data-name="district" @tap="selectDistrictMetro"><text>区域</text></view>
                            <view class="{{filter.districtSection.selectedSection == 'metro' ? 'on':''}}" @tap="selectDistrictMetro" data-name="metro"><text>地铁</text></view>                            
                        </view>
                        <view class="district-metro tabs-frame {{filter.districtSection.selectedSection=='district'?'visible':''}}">
                           <view class="left">
                            <view @tap="selectDistrict" class="item {{item.id == filter.districtSection.selectedDistrictId? 'active':''}}" wx:for="{{filter.districtSection.districts}}" data-id="{{item.id}}">{{item.name}}</view>
                           </view>
                           <view class="right" wx:for="{{filter.districtSection.districts}}" wx:if="{{filter.districtSection.selectedDistrictId == item.id}}">
                            <block wx:for="{{item.subList}}" wx:for-item="sl">
                                <view @tap="selectTown" class="item {{town.id==filter.districtSection.selectedTownId?'active':''}}" wx:for="{{sl.towns}}" wx:for-item="town" data-type="{{town.type}}" data-id="{{town.id}}">{{town.name}}</view>
                            </block>                            
                           </view>
                        </view>
                        <view class="district-metro tabs-frame {{filter.districtSection.selectedSection=='metro'?'visible':''}}">
                           <view class="left">
                            <view @tap="selectMetro" class="item {{item.id == filter.districtSection.selectedMetroId? 'active':''}}" wx:for="{{filter.districtSection.metros}}" data-id="{{item.id}}">{{item.name}}</view>
                           </view>
                           <view class="right" wx:for="{{filter.districtSection.metros}}" wx:if="{{filter.districtSection.selectedMetroId == item.id}}">
                            <view @tap="selectStation" class="item {{station.id==filter.districtSection.selectedStationId?'active':''}}" wx:for="{{item.subList}}" wx:for-item="station" data-id="{{station.id}}">{{station.name}}</view>
                           </view>
                        </view>
                    </view>
                </view>
                <view class="items totals {{filter.selectedFilterSection == 'total'? '' : 'invisible'}}">
                    <view @tap="selectTotal" class="{{filter.totalSection.selectedId === item.id? 'active' : ''}}" wx:for="{{filter.totalSection.items}}" data-item="{{item}}" wx:for-key="{{item.id}}">{{item.text}}</view>
                    <view class="custom">
                        <view class="input"><input data-name="start" @input="typeTotal" value="{{filter.totalSection.customStartPrice}}"/></view>-<view class="input"><input @input="typeTotal" data-name="end" value="{{filter.totalSection.customEndPrice}}"/></view><view class="button" @tap="clickCustomPrice">确定</view>
                    </view>
                </view>
                <view class="items types {{filter.selectedFilterSection == 'type'? '' : 'invisible'}}">
                    <view @tap="selectType" class="item {{item.active?'active':''}}" wx:for="{{filter.typeSection.items}}" data-id="{{item.id}}">{{item.text}}</view> 
                    <view class="confirm">
                        <button class="button" @tap="clickConfirmType">确定</button>
                    </view>
                </view>
                <view class="items sorts {{filter.selectedFilterSection == 'sort'? '' : 'invisible'}}">
                    <view @tap="selectSort" class="{{filter.sortSection.selectedId == item.id? 'active' : ''}}" wx:for="{{filter.sortSection.items}}" data-id="{{item.id}}">{{item.text}}</view>
                </view>
            </view>    
    </view>
    </view>

    <view class="esf-items">        
       <block wx:if="{{items && items.length>0}}">       
        <view class="house-count {{expand?'expand':''}}">已为您展示附近 {{total}} 套房源</view>     
        <view class="items"> 
            <repeat for="{{items}}" item="item">
                <esf :item="item" eventName="1209013"></esf>
            </repeat>
            <view style="text-align: center; font-size: 28rpx; color: #4E4E4E ;{{reachBottom?'':'display:none'}}">
                我是有底线的^_^
            </view>
        </view>
       </block> 

       <view class="error" wx:if="{{isLoadError}}">
        <image src="http://img.wkzf.com/04f36182e2754599889eae69fc206270" @tap="refresh"></image>
        <view>加载失败，点击刷新</view>
       </view>

       <view class="no-data" wx:if="{{!items || items.length == 0}}">
        <view class="desc">
            暂时没有符合条件的房源
        </view>
        <view class="recommend">
            您可以扩大搜索范围，找到更多的房源
        </view>
        <button class="clear" @tap="clearFilter">
            清楚条件
        </button>
       </view>       
    </view>
    </block>
    <view class="no-open" wx:if="{{!isOpenCity}}">
        <view>
        <view>很抱歉</view>
        <view>{{cityName}}暂未开通二手房业务</view>
        <button class="switch-city" @tap="switchCity">
            去看看其他城市的二手房
        </button>
        </view>
    </view>
          

    <tips :visibility.sync="tipsVisibility" :msg.sync="tipsMsg"></tips>
</template>

<script>
    import wepy from "wepy" ;    
    import Esf from "../../components/esf";
    import apiDataFilter from "../../mixins/apiDataFilter";
    import Tips from "../../components/tips" ;
    import Trace from "../../mixins/trace";

    const DEFAULT = {
        selectedDistrictId: "",
        selectedTownId: "",
        selectedMetroId: "",
        selectedStationId: "",
        selectedSection: "district",
        selectedTotalId: 0,
        selectedTypeIds: [],
        selectedSortId: "",
        offset: 0,
        city: {
            cityId: 43,
            cityName: "上海",
            lon: "",
            lat: "",
            cityPinyin: "shanghai"
        },
        highCities: [43,221,741,771,1873],/*43  上海市
221  廊坊市
741  南京市
771  苏州市
1873  广州市*/
        totalOptionsHigh:[{
                            id: -1,
                            text: "不限",
                            start: "",
                            end: ""
                        },{
                            id: 1,
                            text: "100 万以下",
                            start: 0,
                            end: 100
                        },{
                            id: 2,
                            text: "100 - 150 万",
                            start: 100,
                            end: 150
                        },{
                            id: 3,
                            text: "150 - 200 万",
                            start: 150,
                            end: 200
                        },{
                            id: 4,
                            text: "200 - 250 万",
                            start: 200,
                            end: 250
                        },{
                            id: 5,
                            text: "250 - 300 万",
                            start: 250,
                            end: 300
                        },{
                            id: 6,
                            text: "300 - 500 万",
                            start: 300,
                            end: 500
                        },{
                            id: 7,
                            text: "500 - 1000 万",
                            start: 500,
                            end: 1000
                        },{
                            id: 8,
                            text: "1000 - 2000 万",
                            start: 1000,
                            end: 2000
                        },{
                            id: 9,
                            text: "2000万及以上",
                            start: 2000,
                            //end: null
                        }],// 上海、广州、杭州、苏州、廊坊、南京用这个
        totalOptionsLow: [{
                            id: -1,
                            text: "不限",
                            start: "",
                            end: ""
                        },{
                            id: 1,
                            text: "50 万以下",
                            start: 0,
                            end: 50
                        },{
                            id: 2,
                            text: "50 - 80 万",
                            start: 50,
                            end: 80
                        },{
                            id: 3,
                            text: "80 - 100 万",
                            start: 80,
                            end: 100
                        },{
                            id: 4,
                            text: "100 - 150 万",
                            start: 100,
                            end: 150
                        },{
                            id: 5,
                            text: "150 - 200 万",
                            start: 150,
                            end: 200
                        },{
                            id: 6,
                            text: "200 - 300 万",
                            start: 200,
                            end: 300
                        },{
                            id: 7,
                            text: "300 - 500 万",
                            start: 300,
                            end: 500
                        },{
                            id: 8,
                            text: "500万以上",
                            start: 500,
                            //end: undefined
                        }],//其他城市用这个
    }

    export default class Index extends wepy.page {
        config = {            
            navigationBarTitleText: "悟空找房",
            onReachBottomDistance: 50            
        } ;
        components = {            
            esf: Esf,
            tips: Tips
        } ; 
        data = {  
                city: null/*{
                    cityId: 1,
                    cityName: "北京"
                }*/,
                estate: {
                    id: "",
                    name: ""
                },
                filter : {
                    selectedFilterSection: "",
                    districtSection: {
                        districts: [],
                        metros:[],
                        selectedDistrictId: DEFAULT.selectedDistrictId,
                        selectedTownId: DEFAULT.selectedTownId,
                        selectedMotroId: DEFAULT.selectedMotroId,
                        selectedStationId: DEFAULT.selectedStationId,
                        selectedSection: DEFAULT.selectedSection, //默认区域选中
                        meter: 0,//附近多少米
                        isNear: false,
                        meters: [{
                            id: 0,
                            name: "不限（智能范围）", 
                            type: "near"                                                       
                        },{
                            id: 1,
                            name: "500米以内",
                            meter: 500,
                            type: "near"                                                       
                        },{
                            id: 2,
                            name: "1000米以内",
                            meter: 1000,
                            type: "near"                                                       
                        },{
                            id: 3,
                            name: "2000米以内",
                            meter: 2000,
                            type: "near"                                                       
                        },{
                            id: 4,
                            name: "5000米以内",
                            meter: 5000
                        }]
                    },
                    totalSection: {
                        items: DEFAULT.totalOptionsHigh,
                        selectedId: '',
                        priceStart: "",//最低价
                        priceEnd: "",//最高价
                        customStartPrice: "",//自定义最低价,用来显示的
                        customEndPrice: "",//自定义最高价,用来显示的
                    },
                    typeSection: {
                        items: [{
                            id: 0,
                            text: "不限",
                            active: false
                        },{
                            id: 1,
                            text: "一室",
                            active: false
                        },{
                            id: 2,
                            text: "二室",
                            active: false
                        },{
                            id: 3,
                            text: "三室",
                            active: false
                        },{
                            id: 4,
                            text: "四室",
                            active: false
                        },{
                            id: 5,
                            text: "五室及以上",
                            active: false
                        }],
                        selectedIds: DEFAULT.selectedTypeIds
                    },
                    sortSection: {
                        items: [{
                            id: 0,
                            text: "默认排序"
                        },{
                            id: 1,
                            text: "单价从低到高"
                        },{
                            id: 2,
                            text: "单价从高到低"
                        },{
                            id: 3,
                            text: "总价从低到高"
                        },{
                            id: 4,
                            text: "总价从高到低"
                        }],
                        selectedId: DEFAULT.selectedSortId
                    }
                },                   
                isLoadError: false,
                isOpenCity: true,  
                offset: DEFAULT.offset,
                pageSize: 20,  
                total: 0,  
                unitPrice: 0,//城市单价     
                reachBottom: false,              
                items: [],
                tipsVisibility: false,
                tipsMsg: "",
                expand: false,
                showTotal: false,
                fixed: false,
                trace: new Trace          
        } ;
        computed = {
            
        } ;
        methods = {
           switchFilter(e) { //切换筛选条件事件处理函数
               let name = e.currentTarget.dataset.name;
               if(this.filter.selectedFilterSection == name){
                   name = '';
               }
               this.filter.selectedFilterSection = name;
               if(name == 'sort') {
                   this.trace.uv({eventName: "1209008"});
               }
               //this.setData('filter.selectedFilterSection',name)
           },
           selectSort(e) {//切换排序规则
                let sortId = e.currentTarget.dataset.id;
                if(this.filter.sortSection.selectedId == sortId) return;
                this.filter.sortSection.selectedId = sortId;
                this.filter.selectedFilterSection = "";
                this.refresh();

                if(sortId > 0){//默认排序不埋点
                    let eventName = 1209008 + sortId;
                    this.trace.uv({eventName: eventName});
                }

           },

           selectType(e) {//切换房型                
                let typeId = e.currentTarget.dataset.id;  
                this.uv({eventName: "1209006", eventParam: {room: 0}});              
                let type = this.filter.typeSection.items.filter((it)=>{
                    return it.id == typeId;
                })[0];
                type.active = !type.active;
                if(type.id == 0){//不限与别的互斥
                    if(type.active){
                        this.filter.typeSection.items.forEach((it)=>{
                            if(it.id != typeId) {
                                it.active = false;
                            }
                        });
                    }                    
                }else{
                    this.filter.typeSection.items[0].active = false;
                }

                let arr = [];
                for(let i = 0; i < this.filter.typeSection.items.length; i++){
                    if(this.filter.typeSection.items[i].active){
                        arr.push(this.filter.typeSection.items[i].id);
                    }
                }
                this.filter.typeSection.selectedIds = arr;                
            },
            selectTotal(e) {//切换总价
                let totalItem = e.currentTarget.dataset.item;
                if(this.filter.totalSection.selectedId == totalItem.id) return;
                this.filter.totalSection.selectedId = totalItem.id;

                this.filter.totalSection.priceStart = totalItem.start;
                this.filter.totalSection.priceEnd = totalItem.end;
                this.filter.totalSection.customEndPrice = "";
                this.filter.totalSection.customStartPrice = "";
                this.filter.selectedFilterSection = "";
                this.trace.uv({eventName: "1209004"});
                this.$apply();
                this.refresh();
            },
            clickCustomPrice() {//点击自定义价钱确定
                this.filter.totalSection.selectedId = "";
                this.filter.totalSection.priceStart = this.filter.totalSection.customStartPrice;
                this.filter.totalSection.priceEnd = this.filter.totalSection.customEndPrice;
                this.filter.selectedFilterSection = "";

                this.trace.uv({eventName: "1209005", eventParam: {price_range: this.filter.totalSection.customStartPrice + "-" + this.filter.totalSection.customEndPrice}});

                this.refresh();
            },
            selectDistrictMetro(e) {//切换区域或地铁
                let name = e.currentTarget.dataset.name;
                if(this.filter.districtSection.selectedSecion == name) return;
                this.filter.districtSection.selectedSection = name;
                this.filter.districtSection.selectedDistrictId = '';
                this.filter.districtSection.selectedTownId = '';
                this.filter.districtSection.selectedMetroId = '';
                this.filter.districtSection.selectedStationId = '';
            },
            selectDistrict(e) {//选择具体区
                let districtId = e.currentTarget.dataset.id;
                if(this.filter.districtSection.selectedDistrictId == districtId) return;
                this.filter.districtSection.selectedDistrictId = districtId;
                this.filter.districtSection.selectedTownId = '';
            },
            selectTown(e) {//选择具体板块     
                this.estate = null;
                wx.setStorageSync('estate',null);

                let townId = e.currentTarget.dataset.id;
                if(this.filter.districtSection.selectedTownId == townId) return;
                let type = e.currentTarget.dataset.type;
                if(type == "near"){//附近
                    this.filter.districtSection.meter = this.filter.districtSection.meters.filter((it)=>{
                        return it.id == townId;
                    })[0].meter;
                    this.filter.districtSection.isNear = true;                    
                }else{
                    this.filter.districtSection.meter = "";
                    this.filter.districtSection.isNear = false;
                    this.trace.uv({ eventName: "1209003", eventParam: {region_id: this.filter.districtSection.selectedDistrictId, town_id: townId} });
                }
                
                this.filter.districtSection.selectedTownId = townId;
                this.filter.selectedFilterSection = "";
                this.refresh();
            },
            selectMetro(e) {//选择具体地铁线路
                let metroId = e.currentTarget.dataset.id;
                if(this.filter.districtSection.selectedMetroId == metroId) return;
                this.filter.districtSection.selectedMetroId = metroId;
                this.filter.districtSection.selectedStationId = '';
            },
            selectStation(e) {//选择具体地铁站点
                let stationId = e.currentTarget.dataset.id;
                if(this.filter.districtSection.selectedStationId == stationId) return;
                this.filter.districtSection.selectedStationId = stationId;
                this.filter.districtSection.selectedDistrictId = "";
                this.filter.districtSection.selectedTownId = "";
                this.filter.districtSection.isNear = false;                

                this.trace.uv({ eventName: "1209003", eventParam: { subwary_id: this.filter.districtSection.selectedMetroId, station_id: stationId }});

                this.refresh();
            },
           reload() {// 刷新列表
            this.filter.selectedFilterSection = "";            
            this.refresh();
           },
           clickConfirmType() {// 户型选择确定点击事件
                let tmpA = [];
                this.filter.typeSection.items.forEach(function(t){
                    if(t.active) {
                        tmpA.push(t.text);
                    }
                });
                if(tmpA.length == 0){
                    tmpA.push(0);
                }
                let str = tmpA.join(',');
                this.trace.uv({eventName: "1209007", eventParam:{room: str}});
                this.filter.selectedFilterSection = "";            
                this.refresh();
           },
           switchCity() {
               wx.navigateTo({url:'/pages/index/city'});
           },
           searchEstate() {
               this.trace.uv({ eventName: "1209001" });
               wx.navigateTo({
                   url: "/pages/index/search"
               });
           },
           clearEstate() {
               wx.setStorageSync("estate",null);
               this.estate = null;               
               this.refresh();
           },   
           clearFilter() {//清空筛选条件
                //清空选中的区域板块和地铁线路
                this.filter.districtSection.selectedDistrictId = DEFAULT.selectedDistrictId;
                this.filter.districtSection.selectedTownId = DEFAULT.selectedTownId;
                this.filter.districtSection.selectedMotroId = DEFAULT.selectedMetroId;
                this.filter.districtSection.selectedStationId = DEFAULT.selectedStationId;
                this.filter.districtSection.isNear = false;
                this.filter.districtSection.meter = "";
                this.filter.totalSection.priceStart = "";
                this.filter.totalSection.priceEnd = "";
                this.filter.totalSection.selectedId = DEFAULT.selectedTotalId;
                this.filter.totalSection.customStartPrice = "";
                this.filter.totalSection.customEndPrice = "";
                this.filter.typeSection.selectedIds = [];
                this.filter.sortSection.selectedId = DEFAULT.selectedSortId;
                this.filter.typeSection.items.forEach((it)=>{
                    it.active = false;
                })
                                
                this.refresh();
           },
           typeTotal(e) {
               let name = e.currentTarget.dataset.name;
               let value = e.detail.value;
               this.filter.totalSection[name=="start"?"customStartPrice":"customEndPrice"] = value;
           },
           gotoPriceList() {
               this.trace.uv({ eventName: "1209002" });
               wx.navigateTo('/pages/market/index?cityId='+this.city.cityId);
           },
           clickCover() {
               this.filter.selectedFilterSection = "";
           }     
        } ;
        events = {

        } ;
        onLoad() {            
            //首次读取storage中是否有city，否则就是默认城市
            this.city = wx.getStorageSync("city") || DEFAULT.city;
            //this.getDistrictsAndMetro();            

            this.trace.pv({ pageName: "1209" });

           //todo:弹出loading
           //定位
           wx.getLocation({
               success: (res)=>{
                   //根据经纬度获取城市信息
                    apiDataFilter.request({
                        apiPath: "index.findCityInfoByLonAndLat",
                        data: {
                            lon: res.longitude,
                            lat: res.latitude
                        },
                        successCallback: (data)=>{
                            data.data.lon = res.longitude;
                            data.data.lat = res.latitude;
                            data.data.isLocated = true;//定位成功标志位
                            wx.setStorageSync("city",data.data);
                            wx.setStorageSync("locationCity",data.data);
                            this.showTotal = true;
                            if(this.city){
                                if(this.city.cityId != data.data.cityId){//定位的城市不是默认城市
                                    this.city = data.data;                                    
                                } else {
                                    this.city = data.data;
                                }                                                                
                            } else {
                                this.city = data.data;                                
                            }
                            this.getDistrictsAndMetro(); 
                            this.$apply();            
                        }                        
                    });
               },
               fail: (opts)=>{                       
                   if(opts && opts.errMsg.indexOf('auth') > 0){//用户选择了拒绝定位
                        this.getDistrictsAndMetro(); 
                   } else {//定位失败                        
                        this.getDistrictsAndMetro();
                        this.tipsMsg = "定位失败";
                        this.tipsVisibility = true;
                        this.$apply();
                   }
                   if(!wx.getStorageSync('city')){
                       wx.setStorageSync('city', this.city);
                   }
               },
               complete: ()=>{
                   //todo:消失loading
               }
           });
        };
        onShow(options) {
            this.estate = wx.getStorageSync("estate"); 
            let city = wx.getStorageSync("city");
            if(city && this.city) {
                if(city.cityId != this.city.cityId) {//城市发生了变化，重新加载区域地铁和房源
                    this.city = city;
                    this.showTotal = true;
                    this.getDistrictsAndMetro();
                    return;
                }
            }

            if(this.estate){//从

            }

            this.refresh();                        
        };
        getDistrictsAndMetro() {
            //判断当前城市是否开通业务
            apiDataFilter.request({
                apiPath: "index.getAllCityBusiness",
                successCallback: (data)=>{                                       
                    let cities = data.data || [];
                    if(cities.filter((item)=>{ return item.cityId == this.city.cityId}).length == 0){
                        this.isOpenCity = false;
                        this.$apply();                                            
                    }else{
                        //清空选中的区域板块和地铁线路
                        this.filter.districtSection.selectedDistrictId = DEFAULT.selectedDistrictId;
                        this.filter.districtSection.selectedTownId = DEFAULT.selectedTownId;
                        this.filter.districtSection.selectedMotroId = DEFAULT.selectedMetroId;
                        this.filter.districtSection.selectedStationId = DEFAULT.selectedStationId;
                        this.filter.totalSection.selectedId = DEFAULT.selectedTotalId;
                        //this.filter.typeSection.selectedId = DEFAULT.selectedTypeId;
                        //this.filter.sortSection.selectedId = DEFAULT.selectedSortId;

                        //根据城市修改总价筛选
                        if(DEFAULT.highCities.indexOf(this.city.cityId) > -1){
                            this.filter.totalSection.items = DEFAULT.totalOptionsHigh;
                        } else {
                            this.filter.totalSection.items = DEFAULT.totalOptionsLow;
                        }

                        this.$apply();

                        //地铁数据
                        apiDataFilter.request({
                            apiPath: "index.getCitySubwayLines",
                            data: {
                                cityId: this.city.cityId
                            },
                            successCallback: (data)=>{
                                //加工数据，添加"不限"
                                let d = data.data || [];
                                d.splice(0,0,{
                                    id: "-1",
                                    name: "不限"
                                });
                                for(let i = 0; i < d.length; i++){
                                    d[i].subList = d[i].subList || [];
                                    d[i].subList.splice(0,0,{
                                        id: "-1",
                                        name: "不限"
                                    });
                                }
                                

                                this.filter.districtSection.metros = d;
                                this.$apply();
                            }
                        });

                        //区域板块数据
                        apiDataFilter.request({
                            apiPath: "index.getCityAreasInfo",
                            data: {
                                cityId: this.city.cityId
                            },
                            successCallback: (data)=>{
                                let d = data.data;
                                d.splice(0,0,{
                                    id: "-1",
                                    name: "不限"
                                });                                
                                for(let i = 0; i < d.length; i++){
                                    d[i].subList = d[i].subList || [];
                                    d[i].subList.splice(0,0,{
                                        towns: [{
                                            id: "-1",
                                            name: "不限"
                                        }]
                                    });
                                }
                                if(this.city.isLocated){
                                    d.splice(0,0,{
                                        id: "-2",
                                        name: "附近",
                                        subList: [{
                                            towns: this.filter.districtSection.meters
                                        }]
                                    });
                                    this.filter.districtSection.selectedDistrictId = "-2";
                                    this.filter.districtSection.selectedTownId = "0";
                                }else{
                                    d.splice(0,0,{
                                        id: "-2",
                                        name: "附近/定位失败"                                        
                                    });
                                }
                                this.filter.districtSection.districts = d;
                                this.$apply();
                            }
                        });


                        apiDataFilter.request({
                            apiPath: "index.getAreaPriceInfo",
                            data: {
                                dicId: this.city.cityId,
                                dicType: 3
                            },
                            successCallback: (data)=>{
                                this.unitPrice = data.data.avgPrice;
                                this.$apply();
                            }

                        });
                        this.refresh();
                    }
                }
            });            
        };
        getEsfList(offset,cb) {
            //收集查询条件    
            let districtId = !this.filter.districtSection.isNear &&this.filter.districtSection.selectedDistrictId || "";
            let townId = !this.filter.districtSection.isNear && this.filter.districtSection.selectedTownId || "";
            let subEstateId = this.estate && this.estate.realIdObj.subEstateId;
            if(this.estate){
                districtId = this.estate.realIdObj.districtId;
                townId = this.estate.realIdObj.townId;
            }
            let params = {
                cityId: this.city.cityId,
                districtId: districtId,
                townId: townId,
                subEstateId: subEstateId,
                priceStart: this.filter.totalSection.priceStart,
                priceEnd: this.filter.totalSection.priceEnd,
                houseType: this.filter.typeSection.selectedIds.filter((ht)=>{return ht!=0}),
                offset: offset,
                pageSize: 20,
                orderType: this.filter.sortSection.selectedId,
                subwayLine: this.filter.districtSection.selectedMetroId,
                subwayStation: this.filter.districtSection.selectedStationId,
                endMetres: this.filter.districtSection.isNear && this.filter.districtSection.meter || "",
                localLon: this.filter.districtSection.isNear && this.city.lon || "",
                localLat: this.filter.districtSection.isNear && this.city.lat || ""
            };

            apiDataFilter.request({
                apiPath: "index.secondHouseList",
                method: "POST",
                //contenType: "application/json",
                data: params,
                successCallback: (data)=>{     
                    this.total = data.data && data.data.total || 0;
                    this.offset = this.offset + (data.data && data.data.secondHouseListModels && data.data.secondHouseListModels.length || 0);                    
                    cb && cb(data);                                  
                }
            });     
        };
        refresh() {//刷新
            this.offset = 0;
            this.reachBottom = false;            
            this.getEsfList(this.offset,(data)=>{
                this.items = data.data.secondHouseListModels || [];
                if(this.showTotal){
                    this.expand = true;
                    setTimeout(()=>{
                        this.expand = false;
                        this.$apply();
                    },4000);
                }
                this.showTotal = false;
                this.$apply();
            });
            this.$apply();
        };
        onReachBottom() {//触底加载
            if(this.total <= this.offset) {//已到底
                return;
            }

            this.getEsfList(this.offset,(data)=>{
                this.items = this.items.concat(data.data.secondHouseListModels);
                this.$apply();
            });
        };
        onPageScroll(opt) {
            if(opt.scrollTop > 200) {
                if(!this.fixed){
                    this.fixed = true;
                    this.$apply();
                }
            } else {
                if(this.fixed){
                    this.fixed = false;
                    this.$apply();
                }
            }

            
        };
    }
</script>

<style lang="less">
@import '../../less/mixins';
    .city-search {
        padding: 0 30rpx 30rpx 30rpx;
        background-color: #fff;
        .flex();
        .city {
            font-size: 28rpx;
            color: #000;            
            .flex-shrink(0);
            padding:10rpx 0;
            &::after {
                content: '';
                vertical-align: middle !important;
                .triangle-down(8rpx,#7c7c7c);
            }            
        }
        .search-box {
            .flex();
            .flex(1);
            margin-left: 28rpx;            
            background-color: #F0F0F0;
            border-radius: 6rpx;
            font-size: 26rpx;
            color: #7C7C7C;
            padding: 12rpx 0rpx 2rpx 30rpx;
            .estate-address {
                margin-left: 9rpx;
                &::before {

                }
            }

            position: relative;
            .icon-close {
                margin-top: 4rpx;
                font-size: 26rpx;
                position: absolute;
                right: 19rpx;
                &.invisible {
                    display: none;
                }
            }
        }
    }

    .current-price {
        color: #fff;
        padding: 63rpx 30rpx;
        background-image: linear-gradient(90deg, #64BCF0 6%, rgba(0,125,255,0.82) 91%);
        position: relative;
        transition: height 2s;
        -webkit-transition: height 2s;
        height: 144rpx;
        .title {
            font-size: 50rpx;
            line-height: 1;
        }

        .price {
            font-size: 64rpx;
            line-height: 1;
            margin-top: 30rpx;
        }

        .detail {
            font-size: 32rpx;
            line-height: 28rpx;
            position: absolute;
            top: 171rpx;
            right: 24rpx;
        }        
    }

    .filter {
         position: relative;
        .district-total-type-sort {
            background-color: #fff;
            color: #000;
            font-size: 32rpx;
            padding: 30rpx 0;
            box-shadow: 0 2rpx 2rpx #E4E4E4;
            margin-bottom: 4rpx;
                     
            .flex();            

            .district-section, .total-section, .type-section, .sort-section {
                text-align: center;
                .flex(1);
                position: relative;
                .closed::after {
                    content: '';
                    .triangle-down(9rpx, #7C7C7C);
                    vertical-align: middle !important;                    
                }

                .open {
                    color:  #4081D6;
                    &::after {
                        color:  #4081D6;
                        content: '';
                        .triangle-up(9rpx, #7C7C7C);                        
                        vertical-align: middle !important;
                    }
                }
            }                                              
        }

        .active {
            color:  #4081D6;
        }

        .invisible {
            display: none
        }
        .content {                
                /*background-color: #f0f0f0;*/
                margin-top: 12rpx;
                position: absolute;
                width: 100%;
                top: 92rpx;                           
                font-size: 30rpx;                               
                /*max-height: 0rpx;
                overflow: auto;
                &.show {
                    max-height: 500rpx;
                }*/

                .items {
                    transition: all 2s;
                    background-color: #fff;
                    /*max-height: 0rpx;
                    overflow: auto;

                    &.show {
                        max-height: 500rpx;
                    }*/
                }          

                .sorts {
                    view {
                        padding-top: 29rpx;
                        padding-bottom: 29rpx;
                        font-size: 30rpx;
                        line-height: 1;
                        vertical-align: middle;
                        text-align: center;
                        & + view {
                            border-top: 1rpx solid #E4E4E4;
                        }
                    }
                }    

                .types {
                    /*&.show{*/
                        padding: 30rpx 30rpx 50rpx 30rpx;
                    /*}*/
                    background-color: #fff;
                    .item {
                        background-color: #F5F5F5;
                        font-size: 24rpx;
                        color: #000;
                        border-radius: 8rpx;
                        text-align: center;
                        padding: 20rpx;
                        border: 2rpx solid #F5F5F5;
                        width: 208rpx;
                        display: inline-block;
                        margin: 11rpx;
                        box-sizing: border-box;
                        text-align: center;

                        &.active {
                            color:  #4081D6;
                            border: 2rpx solid  #4081D6;
                            background-color: #fff;
                        }                                                
                    }

                    .confirm {
                        display: block;
                        margin-top: 40rpx;
                        border-top: 1px solid #D7D7D7;
                        padding-top: 50rpx;
                        text-align: center;
                        .button {
                            width: 310rpx;
                            border-radius: 8rpx;
                            color: #fff;
                            background-color: #4081D6;
                            font-size: 26rpx;
                            text-align: center;
                            padding:18rpx 0;
                            box-sizing: border-box;
                            line-height: 37rpx;
                        }
                    }
                }

                .totals {
                    padding-left: 40rpx;
                    padding-right: 40rpx;
                    view {
                        padding-top: 29rpx;
                        padding-bottom: 29rpx;
                        font-size: 30rpx;
                        line-height: 1;
                        vertical-align: middle;
                        text-align: center;
                    }

                    .custom {
                        border-top: 1rpx solid #D7D7D7;
                        padding: 40rpx 0;
                        color: #999;

                        view {
                            display: inline-block;
                            padding: 0;
                            &.input {                                
                                border-radius: 8rpx;
                                background-color: #F6F6F6;
                                text-align: center;                                
                                color: #4081D6;
                                width: 200rpx;
                                margin: 0 9rpx;
                                
                                font-size: 30rpx;
                                display: inline-block;
                                box-sizing: border-box;
                                input {
                                    height: 66rpx;
                                    line-height: 1;
                                }
                            }  

                            &.button {  
                                padding: 21rpx 0;
                                display: inline-block;  
                                width: 208rpx;
                                margin-left: 11rpx;
                                border-radius: 8rpx;                                
                                background-color: #4081D6;
                                text-align: center;                                
                                line-height: 1;    
                                color: #fff;                                
                                font-size: 30rpx;                                                                               
                            }                           
                        }                           
                    }
                }
            }
    }    

    .district-metro {
        &.visible {
            .flex();
        }  

        .flex();
        .left {
            .flex(1);
            background-color: #F0F0F0;
            font-size: 30rpx;     

            .item {
                line-height: 1;
                padding: 29rpx 0 29rpx 40rpx;
                color: #000;
                &.active {
                    background-color: #fff;
                    color: #4081D6;
                }  
            }                 
        }
        .right{
            .flex(1);
            font-size: 30rpx;
            background-color: #fff;
            

            .item {
                line-height: 1;
                color: #000;
                padding: 29rpx 0 29rpx 40rpx;
                &.active {                    
                    color: #4081D6;
                } 
            }
        }
    }

    .esf-items {
        position: relative;
        background-color: #fff;        
        height: 100%;       
        .house-count {
            padding: 16rpx 0;
            font-size: 28rpx;
            line-height: 1;
            color: #4081D6;
            text-align: center;
            /*border: 1px solid #E4E4E4;*/            
            transition: all 4s;
            -webkit-transition: all 4s;                      
            box-sizing: border-box; 
            vertical-align: middle;
            position: absolute;
            width: 100%;
            background-color: #fff;
            border-bottom: 1px solid #E4E4E4;
            top: -60rpx;
            &.expand {
               top: 0;
            }         
        }

        .items {
            padding:0 15rpx;
            background-color: #fff; 
        }        
    }

    page {
        height: 100%;
    }
    .error {
        text-align: center;
        padding-top: 180rpx;
        image {
            width: 313rpx;
            height: 288rpx;
        }
        view {
            font-size: 36rpx;
        }
    }

    .no-data {
        padding-top: 260rpx;
        text-align: center;        
            font-size: 32rpx;
        .desc {
            color: #000;
            line-height: 45rpx;
        }
        .recommend {
            color: #7C7C7C;
            line-height: 45rpx;
        }

        .clear {
            margin-top: 50rpx;
            width: 690rpx;
            color: #92A7C3;
            background-color: #F0F0F0;
            font-size: 28rpx;
            line-height: 1;
            padding-top: 31rpx;
            padding-bottom: 31rpx;
        }
    }

    .no-open {
        height: 100%;
        font-size: 32rpx;
        line-height: 45rpx;
        text-align: center;        
        background-color: #fff;
        .flex();
        .align-items(center);
        .justify-content(center);
        .switch-city {
            margin-top: 50rpx;
            width: 690rpx;
            color: #92A7C3;
            background-color: #F0F0F0;
            font-size: 28rpx;
            line-height: 1;
            padding-top: 31rpx;
            padding-bottom: 31rpx;
        }
    }

    .cover {
            background-color: rgba(0,0,0,.2);            
            position: fixed;            
            bottom: 0;
            right: 0;
            left: 0;
            top: 0;
            z-index: 4;
            &.invisible {
                display: none;
            }            
        }

    .noscroll {
        height: 100%;
        overflow: hidden;
    }

    .header{
        position: relative; 
        z-index: 5;
        &.fixed{
            width: 100%;
            position: fixed;
            .current-price {
                height: 0rpx;
                padding: 0rpx;
                .title,.price,.detail{
                    font-size: 0rpx;
                }
            }
        }
    }

</style>